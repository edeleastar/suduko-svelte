'use strict';

//const deepcopy = require('deepcopy');

const numberCells = 81;
const numCols = 9;
const numRows = 9;


/**
 * Preceed each sudoku grid value with row, col indices.
 * Examples: 4 in first cell -> 004; 9 in last cell ->889
 * Ignore any "" entries in param array.
 * @param ar The array of data representing the sudoku problem. The array size
 * equals the number of sudoku cells, 81 for standard 9 x 9. Each array element
 * contains the integer value in the cell. The cell indices range 0..80 for standard sudoku.
 * @return a primitive array containing the transformed data.
 */
var toSudokuEngine = function (ar) {
  //let arTrimmed = removeFirstLast(ar); //get rid of [ and ].
  //let arTrans = arTrimmed.split(',');
  let arTrans = ar.split(',');
  nullsToZeroes(arTrans);
  for (let index = 0; index < numberCells; index += 1) {
    let row = Math.floor(index / numCols);
    let col = index % numCols;
    let rcv = row.toString() + col.toString() + arTrans[index];
    arTrans[index] = rcv;
  }

  return arTrans;
}

/**
 * Replace null or empty string values wih zeros throughout array.
 * @param ar
 */
function nullsToZeroes(ar) {
  for(let i = 0; i < ar.length; i += 1) {
    if(ar[i] == '' || ar[i] == ','  || ar[i] ===  null) {
      ar[i] = "0";
    }
  }
}
/**
 * Remove first and last array element.
 */
// function removeFirstLast(ar) {
//   let trimmedstring = ar.substring(1, ar.length - 1);
//   return trimmedstring;
// }
/**
 * Transforms the 2-D array representing the sudoku grid from the format
 * used in the Sudoku engine to that required for rendering - a 1-d array. The sudoku engine format,
 * for example for the first cell containing, say, 4, is 004. 00 represents row 0, column 0.
 * @param ar The 2-D array generated by sudoku engine.
 * @return The 1-D transformed array where the row, col prefixes trimmed.
 */
function fromEngineToRender(ar) {

  let arTrans = [];

  for (let row = 0; row < numRows; row += 1) {
    for (let col = 0; col < numCols; col += 1) {
      arTrans[row*numCols + col] = ar[row][col];
    }
  }
  return arTrans;
}

/**
 * Transforms a 2-D to 1-D array.
 * * @param ar The 2-d array to be transformed
 * @return The 1-d transformed array.
 */
function transform2Dto1DArray(ar) {

  let arTrans = [];
  for (let index = 0; index < arTrans.length; index += 1) {
    arTrans[index] = '';
  }

  for (let row = 0; row < numCols; row += 1) {
    for (let col = 0; col < numCols; col += 1) {
      let index = row * numCols + col;
      let val = ar[row][col].toString();
      arTrans[index] = val;
    }
  }

  return arTrans;
}

/**
 * A string example : "[3,4,0,...3,5,9]"
 * The transformed array: [0] -> 3, [1] -> 4 and so on.
 * @param str The string to be transformed.
 * @return The transformed string.
 */
// function stringToArray(str) {
//   let arraystrs = str.substring(1, str.length).split(',').map(Number);
//   return arraystrs;
// }

module.exports.toSudokuEngine = toSudokuEngine;
module.exports.fromEngineToRender = fromEngineToRender;